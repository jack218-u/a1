package main
import "fmt"
func main(){
	//使用for循环完成以下案例写一个程序表示，可以接收一个整数，表示层数，打印出金字塔
	//编程思路
	//1.打印出一个矩形
	/* 
		***
		***
		***
	*/
	//2.打印半个金字塔
	/*
		*     1个*
		**    2个*
		***   3个*
	*/
	//3.打印整个金字塔
	/*  假如总层数是m，i表示第几层，每层空格= m - i
	       *       1层1个* 规律 2 * 层数 -1
	      ***      2层3个* 规律 2 * 层数 -1
		 *****     3层5个* 规律 2 * 层数 -1

		   *       1层1个*  空格  3  
		  ***      2层3个*  空格  2
		 *****     3层5个*  空格  1
		*******    4层7个*  空格  0
	  设置空格数为m
	*/
	//空心金字塔打印：分析，我们在给每行打印*号的时候，需要考虑打印*还是打印空格
	//分析结果：每层的第一个和最后一个打印*，其他应该是空格
	//最后一个例外情况，最后一层全部打*
	//i表示层数
	// fmt.Println("输出金字塔的层数，画出金字塔形状")
	var totalLevel int = 5 
	for i :=1; i <=totalLevel; i++ {
		//j表示每层打印几个*
		//j = i 表示每层打印*的个数和层数一样
		for k :=1; k <=totalLevel -i ; k++ {
			fmt.Print(" ")
		}
		for j :=1; j <=2 * i - 1; j++ {
			if j == 1 || j == 2 * i - 1 || i == totalLevel { //当j为第一个输出或者最后一个输出或者i为最后一行,只输出*
				fmt.Print("*") //这里用fmt.Print不用fmt.Println,每次输出不用换行
			} else {
				fmt.Print(" ")
			}
		}
		fmt.Println() //每次j的内层循环完成后到输入i的时候换行
	}
}